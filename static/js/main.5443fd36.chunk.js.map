{"version":3,"sources":["components/AptInfo.jsx","components/Footer.jsx","components/SearchBar.jsx","Hooks/useInputs.jsx","app.jsx","index.js","service/dataApi.js"],"names":["to_date_format","date_str","yyyyMMdd","String","substring","AptInfo","aptInfo","highestPriceApts","newestDealApts","nearAptPriceInfo","onClickAddFilter","filters","onFilterDelete","isVisibleSearchbox","useState","onDelete","target","console","log","filter","data","aptName","아파트","aptSize","전용면적","className","map","newestDealApt","index","highestValue","highestPriceApt","Number","거래금액","toLocaleString","층","거래년월","length","apt","최고가","onClick","bind","type","id","Footer","props","href","SearchBar","inquiryPeriodList","onChange","onSearchRangeChange","onFilterRegist","onFilterSave","onFilterReset","aptNameList","selectedSizeList","htmlFor","name","value","reducer","state","action","Object","keys","reduce","acc","current","useInputs","initialForm","useReducer","form","dispatch","useCallback","e","initialState","selectedRangeIndex","Date","App","openApi","loadingIndicator","setLoadingIndicator","setIsVisibleSearchbox","allAptInfo","setAllAptInfo","yulgokAptInfo","setYulgokAptInfo","setNearAptPriceInfo","setAptNameList","aptSizeObj","setAptSizeObj","setSelectedSizeList","inquiryPeriod","onSet","useEffect","getAllAptInfo","calcMonth","then","getFilterAptInfo","items","filterAptName","getAptNameList","aptSizeList","getAptSizeList","names","initFilter","filterSaved","localStorage","getItem","JSON","parse","document","querySelector","style","display","useMemo","result","push","filterAptSize","alert","focus","CircularProgress","window","confirm","setItem","stringify","removeItem","location","reload","requestOptions","method","this","mostPopular","a","fetch","response","json","filterItems","indexOf","년","월","일","padStart","item","sort","b","Set","resultObj","now","idx","setMonth","getMonth","searchYYYYMM","getFullYear","search","sizeArr","highestRoomList","forEach","size","aValue","bValue","newestRoomList","newestData","highestDataValue","highestData","yyyymm","axios","get","undefined","trim","replace","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5443fd36.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport function to_date_format(date_str) {\n    const gubun = \"-\";\n    var yyyyMMdd = String(date_str);\n    var sYear = yyyyMMdd.substring(0, 4);\n    var sMonth = yyyyMMdd.substring(4, 6);\n    var sDate = yyyyMMdd.substring(6, 8);\n\n    return sYear + gubun + sMonth + gubun + sDate;\n}\n\nconst AptInfo = ({\n    aptInfo: { highestPriceApts, newestDealApts },\n    nearAptPriceInfo,\n    onClickAddFilter,\n    filters,\n    onFilterDelete,\n    isVisibleSearchbox\n}) => {\n    const [filter, setFilter] = useState({});\n    const onDelete = (target) => {\n        console.log('onDelete click~!', target);\n        console.log('filters~!', filters);\n        const filter = filters.filter((data) => {\n            return data.aptName === target.아파트 && data.aptSize === target.전용면적;\n        })[0];\n        console.log('onDelete filter~!', filter);\n        filter && onFilterDelete(filter);\n    };\n    // console.log(nearAptPriceInfo);\n    // console.log();\n\n    // highestPriceApts.map((highestPriceApt) => ());\n\n    return (\n        <>\n            <article>\n                <h1>율곡아파트 최근 시세</h1>\n                <table className=\"tg\">\n                    <thead>\n                        <tr>\n                            <th>전용면적</th>\n                            <th>최근거래가</th>\n                            <th>최고가</th>\n                            <th>층수</th>\n                            <th>최근거래가 거래일</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {newestDealApts &&\n                            newestDealApts.map((newestDealApt, index) => {\n                                const highestValue =\n                                    highestPriceApts &&\n                                    highestPriceApts.filter(\n                                        (highestPriceApt) =>\n                                            highestPriceApt.전용면적 === newestDealApt.전용면적\n                                    );\n                                return (\n                                    <tr key={index}>\n                                        <th className=\"right\">{newestDealApt.전용면적}\n                                        </th>\n                                        <td className=\"right\">\n                                            {Number(newestDealApt.거래금액).toLocaleString(\"ko-KR\")}\n                                        </td>\n                                        <td className=\"right\">\n                                            {highestValue &&\n                                                Number(highestValue[0].거래금액).toLocaleString(\n                                                    \"ko-KR\"\n                                                )}\n                                        </td>\n                                        <td className=\"center\">{newestDealApt.층}층</td>\n                                        <td className=\"center\">\n                                            {to_date_format(newestDealApt.거래년월)}\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                    </tbody>\n                </table>\n            </article>\n\n            <article>\n                <h1>인근아파트 최근 시세({nearAptPriceInfo.length})</h1>\n                <table className=\"tg\">\n                    <thead>\n                        <tr>\n                            <th>아파트명</th>\n                            <th>전용면적</th>\n                            <th>최근거래가</th>\n                            <th>최고가</th>\n                            <th>최근거래가 거래일</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {nearAptPriceInfo &&\n                            nearAptPriceInfo.map((apt, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <th className=\"center\">{apt.아파트}\n                                        </th>\n                                        <td className=\"right\">{apt.전용면적}</td>\n                                        <td className=\"right\">\n                                            {Number(apt.거래금액).toLocaleString(\"ko-KR\")}\n                                        </td>\n                                        <td className=\"right\">\n                                            {Number(apt.최고가).toLocaleString(\"ko-KR\")}\n                                        </td>\n                                        <td className=\"center\">{to_date_format(apt.거래년월)}\n                                            <button className=\"habit-button habit-delete\" onClick={onDelete.bind(this, apt)}>\n                                                <i className=\"fas fa-minus-square\"></i>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                    </tbody>\n                </table>\n                <div className=\"addFilter\">\n                    <button type=\"button\" id=\"addFilter\" onClick={onClickAddFilter}>{isVisibleSearchbox ? \"필터 숨기기\" : \"필터 보이기\"}</button>\n                </div>\n            </article>\n        </>\n    );\n};\n\nexport default AptInfo;\n","import React from \"react\";\n\nconst Footer = (props) => (\n  <footer>\n    <ul>\n      <li>\n        <p>\n          해당 자료는\n        <a href=\"https://www.data.go.kr/\">https://www.data.go.kr/</a>\n        에서 제공하는 자료중 \"군포시\"에 해당하는 자료를 바탕으로 만들었습니다.\n        </p>\n      </li>\n      <li>\n        <p>\n          자료는 공공데이터 포털에 1일 주기로 갱신되며 해당화면은 새로고침 시\n          새로운 자료를 받아옵니다.\n          </p>\n      </li>\n      <li>\n        <p>조회기간은 이번 월(n)부터 1개월전 월(n-1)까지 입니다.</p></li>\n    </ul>\n    <p>© 2021 yulgokapt CEO(yulgok.apt@gmail.com)</p>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport FilterBox from \"./FilterBox\";\n\nconst SearchBar = ({\n  inquiryPeriodList,\n  onSearchRangeChange,\n  onChange,\n  onFilterRegist,\n  filters,\n  onFilterDelete,\n  onFilterSave,\n  onFilterReset,\n  aptNameList,\n  selectedSizeList,\n  isVisibleSearchbox\n}) => {\n  return (\n    <article className=\"searchBox\" className={isVisibleSearchbox ? \"\" : \"inVisible\"}>\n      <div className=\"\">\n        <label htmlFor=\"inquiryPeriod\">조회기간 : (현재월을 제외한 최근)</label>\n        <div className=\"display-flex\">\n          <span></span>\n          <select name=\"inquiryPeriod\" id=\"inquiryPeriod\" onChange={onChange} className=\"width25\">\n            {inquiryPeriodList.map((value, index) => (\n              <option key={index} value={value}>\n                {value}\n              </option>\n            ))}\n          </select>\n          <span>개월</span>\n        </div>\n      </div>\n      <div>\n        <h1>인근아파트 시세 필터</h1>\n        <div>\n          <label htmlFor=\"aptName\">아파트명 : ({aptNameList && aptNameList.length})</label>\n          {/* <input type=\"text\" name=\"aptName\" id=\"aptName\" onChange={onChange} /> */}\n          <select name=\"aptName\" id=\"aptName\" onChange={onChange}>\n            <option value=\"\">선택하세요</option>\n            {\n              aptNameList && aptNameList.map((name, index) => {\n                return <option key={index} value={name}>{name}</option>\n              })\n            }\n          </select>\n          <br />\n          <label htmlFor=\"aptSize\">전용면적 : ({selectedSizeList && selectedSizeList.length})</label>\n          {/* <input type=\"text\" name=\"aptSize\" id=\"aptSize\" onChange={onChange} /> */}\n          <select name=\"aptSize\" id=\"aptSize\" onChange={onChange}>\n            <option value=\"\">선택하세요</option>\n            {\n              selectedSizeList && selectedSizeList.map((name, index) => {\n                return <option key={index} value={name}>{name}</option>\n              })\n            }\n          </select>\n        </div>\n        <div className=\"filter-control-box\">\n          <button onClick={onFilterRegist} className=\"habit-button regist\">필터 등록</button>\n        </div>\n        {/* <FilterBox filters={filters} onFilterDelete={onFilterDelete} /> */}\n        <p>\n          ※ 모든 필터를 삭제할 시 인근아파트 최근 시세에 전체 아파트 정보가 나옵니다.\n        </p>\n        <hr />\n        <div className=\"filter-addon display-none\">\n          <span className=\"filter-control-box\">\n            <button onClick={onFilterSave} className=\"habit-button save\">\n              필터 저장\n            </button>\n            <button onClick={onFilterReset} className=\"habit-button reset\">\n              필터 초기화\n            </button>\n          </span>\n          <ul>\n            <li>\n              <p>\n                필터 저장 : 로컬에 필터를 저장함. 새로고침해도 저장한 필터 기준으로 화면에 보임\n              </p>\n            </li>\n            <li>\n              <p>\n                필터 초기화 : 브라우저에 저장된 필터를 초기화. 새로고침시 적용\n              </p>\n            </li>\n          </ul>\n        </div>\n        {/* <div className=\"filter-show habit-button\">\n          <button onClick=\"\"><i className=\"fas fa-plus-square\"></i> 기능 더보기</button>\n        </div> */}\n      </div>\n    </article>\n  );\n};\n\nexport default SearchBar;\n","import { useCallback, useReducer } from \"react\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        [action.name]: action.value\n      };\n    case 'SET':\n      return {\n        ...state,\n        [action.name]: action.value\n      };\n    case 'RESET':\n      return Object.keys(state).reduce((acc, current) => {\n        acc[current] = '';\n        return acc;\n      }, {});\n    default:\n      return state;\n  }\n}\n\nconst useInputs = (initialForm) => {\n  const [form, dispatch] = useReducer(reducer, initialForm);\n  //change\n  const onChange = useCallback((e) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"CHANGE\", name, value });\n  }, []);\n\n  const onSet = useCallback(({ name, value }) => {\n    dispatch({ type: \"CHANGE\", name, value });\n  }, []);\n\n  // 방법 1\n  // const reset = useCallback(() => dispatch({ type: \"RESET\", form: initialForm }, [initialForm]));\n\n  // 방법 2\n  const reset = useCallback(() => dispatch({ type: \"RESET\" }, []));\n\n  // setForm(initialForm), [initialForm]);\n  return [form, onChange, onSet, reset];\n};\n\nexport default useInputs;\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from \"react\";\nimport \"./app.css\";\nimport AptInfo from \"./components/AptInfo\";\nimport Footer from \"./components/Footer\";\nimport SearchBar from \"./components/SearchBar\";\nimport useInputs from \"./Hooks/useInputs\";\nimport { CircularProgress } from '@material-ui/core';\n\nconst initialState = {\n  inquiryPeriodList: [1, 3, 6, 12],\n  selectedRangeIndex: 0,\n  filters: [],\n};\n\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"REGIST_FILTER\":\n      const sameFilter = state.filters.filter((data) => {\n        return data.aptSize === action.filter.aptSize && data.aptName === action.filter.aptName;\n      });\n      return sameFilter.length === 0 ? {\n        // inputs: initialState.inputs,\n        ...state, // 위와 같은 표현\n        filters: [...state.filters, { ...action.filter, id: new Date() }],\n      } : {...state};\n    case \"REGIST_FILTERS\":\n      return {\n        // inputs: initialState.inputs,\n        ...state, // 위와 같은 표현\n        filters: action.filters.map((filter) => ({ ...filter, id: new Date() })),\n      };\n    case \"REMOVE_FILTER\":\n      return {\n        ...state,\n        filters: state.filters.filter(\n          (filter) => filter.id !== action.filter.id\n        ),\n      };\n    case \"RESET_FILTER\":\n      return {\n        ...action.initialState\n      };\n    default:\n      return state;\n  }\n}\n\nconst App = ({ openApi }) => {\n  let [loadingIndicator, setLoadingIndicator] = useState(true);\n\n  const [isVisibleSearchbox, setIsVisibleSearchbox] = useState(false);\n\n  const [inquiryPeriodList, setInquiryPeriodList] = useState(\n    initialState.inquiryPeriodList\n  );\n  const [allAptInfo, setAllAptInfo] = useState([]);\n  const [yulgokAptInfo, setYulgokAptInfo] = useState({});\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [nearAptPriceInfo, setNearAptPriceInfo] = useState([]);\n  const [aptNameList, setAptNameList] = useState([]);\n  const [aptSizeObj, setAptSizeObj] = useState({});\n  const [selectedSizeList, setSelectedSizeList] = useState([]);\n\n  const [{ aptName, aptSize, inquiryPeriod }, onChange, onSet, reset] = useInputs({\n    aptName: \"\",\n    aptSize: \"\",\n    inquiryPeriod: \"1\",\n  });\n\n  const onLoading = () => {\n    setLoadingIndicator(true);\n  }\n\n  const offLoading = () => {\n    setLoadingIndicator(false);\n  }\n\n  const { filters } = state;\n\n  /**\n   * 1. 컴포넌트가 마운트 되면 아파트 정보를 조회한 후 저장된 Filter 또는 기본 Filter 로 필터링하여 화면에 출력한다.\n   */\n\n  useEffect(() => {\n    setSelectedSizeList(aptSizeObj[aptName]);\n    aptSizeObj[aptName] && onSet({ name: 'aptSize', value: aptSizeObj[aptName][0] });\n  }, [aptName]);\n\n  useEffect(() => {\n    onLoading();\n    openApi\n      .getAllAptInfo({ calcMonth: inquiryPeriod })\n      .then((data) => {\n        console.log(`data : ${data.length}`);\n        setAllAptInfo(data);\n      });\n  }, [inquiryPeriod]);\n\n  useEffect(() => {\n    if (!allAptInfo.length) {\n      return;\n    }\n    console.log(`allAptInfo useMemo`);\n    setYulgokAptInfo(\n      openApi.getFilterAptInfo({ items: allAptInfo, filterAptName: \"율곡\" })\n    );\n    // console.log(openApi.getFilterAptInfo({ items: allAptInfo }).newestDealApts);\n    setNearAptPriceInfo(\n      openApi.getFilterAptInfo({ items: allAptInfo }).newestDealApts\n    );\n    const aptNameList = openApi.getAptNameList({ items: allAptInfo });\n    setAptNameList(aptNameList);\n    const aptSizeList = openApi.getAptSizeList({ items: allAptInfo, names: aptNameList });\n\n    setAptSizeObj(aptSizeList);\n\n    // dispatch({\n    //   type: \"RESET_FILTER\",\n    //   initialState,\n    // })\n\n    console.log(filters);\n    let initFilter = [...filters];\n\n    if (!filters.length) {\n\n      initFilter = [\n        { aptName: \"한라주공4\", aptSize: 41.85 },\n        { aptName: \"한라주공4\", aptSize: 51.66 },\n        { aptName: \"래미안 하이어스\", aptSize: 59.94 },\n        { aptName: \"충무주공(873-2)\", aptSize: 41.4 },\n        { aptName: \"충무주공(872)\", aptSize: 41.85 },\n        { aptName: \"충무주공(872)\", aptSize: 42.75 },\n        { aptName: \"충무주공(872)\", aptSize: 44.06 },\n        { aptName: \"세종\", aptSize: 58.46 },\n        { aptName: \"세종\", aptSize: 58.71 },\n        { aptName: \"우륵\", aptSize: 58.46 },\n        { aptName: \"우륵\", aptSize: 58.71 },\n      ];\n      const filterSaved = localStorage.getItem(\"aptInfoFilter\");\n      if (filterSaved && JSON.parse(filterSaved).length) {\n        initFilter = JSON.parse(filterSaved);\n        document.querySelector('.filter-addon').style.display = 'block';\n      }\n      // console.log(initFilter);\n      // for (const filter of initFilter) {\n      //   dispatch({\n      //     type: \"REGIST_FILTER\",\n      //     filter: {\n      //       aptName: filter.aptName,\n      //       aptSize: filter.aptSize,\n      //     },\n      //   });\n      // }\n    }\n    dispatch({\n      type: \"REGIST_FILTERS\",\n      filters: initFilter,\n    });\n\n  }, [allAptInfo])\n\n  useMemo(() => {\n    const result = [];\n    for (const filter of filters) {\n      result.push(\n        ...openApi.getFilterAptInfo({\n          items: allAptInfo,\n          filterAptName: filter.aptName,\n          filterAptSize: filter.aptSize,\n        }).newestDealApts\n      );\n    }\n    if (filters.length === 0 && allAptInfo.length > 0) {\n      result.push(\n        ...openApi.getFilterAptInfo({ items: allAptInfo }).newestDealApts\n      );\n    }\n    setNearAptPriceInfo(result);\n    offLoading();\n    console.log(`filter update`);\n  }, [filters]);\n\n  const onSearchRangeChange = (event) => {\n    openApi.getAllAptInfo({ calcMonth: event.target.value }).then((data) => {\n      setAllAptInfo(data);\n      setYulgokAptInfo(\n        openApi.getFilterAptInfo({ items: data, filterAptName: \"율곡\" })\n      );\n      setNearAptPriceInfo(\n        openApi.getFilterAptInfo({ items: data }).newestDealApts\n      );\n    });\n  };\n\n  const onFilterRegist = useCallback(() => {\n    if (!aptName){\n      alert('아파트명을 선택하세요.');\n      document.querySelector(\"#aptName\").focus();\n      return ;\n    }\n\n    console.log(`aptSize :: ${aptSize}`)\n    if (!aptSize){\n      alert('전용면적을 선택하세요.');\n      document.querySelector(\"#aptSize\").focus();\n      return ;\n    }\n\n    dispatch({\n      type: \"REGIST_FILTER\",\n      filter: {\n        aptName: aptName,\n        aptSize: Number(aptSize),\n      },\n    });\n    document.querySelector('.filter-addon').style.display = 'block';\n  });\n\n  const onFilterDelete = useCallback((filter) => {\n    dispatch({\n      type: \"REMOVE_FILTER\",\n      filter: {\n        id: filter.id,\n        aptName: filter.aptName,\n        aptSize: filter.aptSize,\n      },\n    });\n    document.querySelector('.filter-addon').style.display = 'block';\n  });\n\n  const onFilterSave = () => {\n    if (window.confirm('이 기능은 새로고침해도 현재 필터를 유지하는 기능입니다. 필터를 저장하시겠습니까?')) {\n      localStorage.setItem(\"aptInfoFilter\", JSON.stringify(filters));\n    }\n  };\n\n  const onFilterReset = () => {\n    localStorage.removeItem(\"aptInfoFilter\");\n    alert('로컬에 저장된 필터가 초기화 되었습니다.');\n    document.location.reload();\n  };\n\n  const onClickAddFilter = () => {\n    setIsVisibleSearchbox(!isVisibleSearchbox);\n    console.log('onClickAddFilter clicked~!');\n  };\n\n\n  return (\n    <>\n      {loadingIndicator === true ? (\n        <div className=\"modal\">\n          <div className=\"modalContent\">\n            <CircularProgress className=\"spinner\" />\n          </div>\n          <div className=\"modalLayer\"></div>\n        </div>\n      ) : null}\n      <AptInfo\n        aptInfo={yulgokAptInfo}\n        nearAptPriceInfo={nearAptPriceInfo}\n        onClickAddFilter={onClickAddFilter}\n        filters={filters || []}\n        onFilterDelete={onFilterDelete}\n        isVisibleSearchbox={isVisibleSearchbox}\n      />\n      <SearchBar\n        // onSearchRangeChange={onSearchRangeChange}\n        inquiryPeriodList={inquiryPeriodList}\n        aptName={aptName}\n        aptSize={aptSize}\n        onChange={onChange}\n        onFilterRegist={onFilterRegist}\n        onFilterDelete={onFilterDelete}\n        filters={filters || []}\n        onFilterSave={onFilterSave}\n        onFilterReset={onFilterReset}\n        aptNameList={aptNameList}\n        selectedSizeList={selectedSizeList}\n        isVisibleSearchbox={isVisibleSearchbox}\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport OpenAPI_APT from \"./service/dataApi\";\n\nconst openApi = new OpenAPI_APT();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App openApi={openApi} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import axios from \"axios\";\n\nconst OpenAPI_APT = function () {\n  const requestOptions = {\n    method: \"GET\",\n  };\n  this.mostPopular = async function () {\n    const response = await fetch(\n      \"https://youtube.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&key=AIzaSyAU1YyXdo8gO7kYc0Ypy0f66VBGja-8ofU\",\n      requestOptions\n    );\n\n    const result = await response.json();\n    return result.items;\n  };\n\n  this.getFilterAptInfo = function ({\n    items,\n    filterAptName = \"\",\n    filterAptSize = \"\",\n  }) {\n    // console.log(\n    //   `filterAptName : ${filterAptName}, filterAptSize : ${filterAptSize}`\n    // );\n    const filterItems = items\n      .filter((data) => {\n        // return data.아파트 === filterAptName;\n        if (filterAptName && filterAptSize) {\n          return (\n            data.아파트.indexOf(filterAptName) > -1 &&\n            data.전용면적 === Number(filterAptSize)\n          );\n        } else if (filterAptName) {\n          return data.아파트.indexOf(filterAptName) > -1;\n        } else if (filterAptSize) {\n          return data.전용면적 === Number(filterAptSize);\n        } else {\n          return data;\n        }\n        // if (filterAptSize) {\n        //   return (\n        //     data.아파트.indexOf(filterAptName) > -1 &&\n        //     data.전용면적 === Number(filterAptSize)\n        //   );\n        // } else {\n        //   return data.아파트.indexOf(filterAptName) > -1;\n        // }\n      })\n      .map((data) => {\n        return {\n          // 거래금액: Number(data.거래금액.trim().replace(\",\", \"\")),\n          거래금액: data.거래금액,\n          년: data.년,\n          월: data.월,\n          일: data.일,\n          전용면적: data.전용면적,\n          층: data.층,\n          아파트: data.아파트,\n          거래년월:\n            data.년 +\n            String(data.월).padStart(2, \"0\") +\n            String(data.일).padStart(2, \"0\"),\n        };\n      });\n\n    return {\n      highestPriceApts: this.highestPriceApts({ items: filterItems }),\n      newestDealApts: this.newestDealApts({ items: filterItems }),\n    };\n  };\n\n  /**\n   * 전체 목록 중에서 AptName 을 중복제거 후 오름차순 정렬하여 반환\n   * @param {*} items : array\n   */\n  this.getAptNameList = function ({ items }) {\n    const filterItems = items\n      .map((item) => {\n        return item.아파트;\n      })\n      .sort(function (a, b) {\n        // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\n        var aValue = a;\n        var bValue = b;\n        if (aValue > bValue) {\n          return 1;\n        }\n        if (aValue < bValue) {\n          return -1;\n        }\n        // a must be equal to b\n        return 0;\n      });\n    return [...new Set(filterItems)];\n  };\n\n  this.getAptSizeList = function ({ items, names }) {\n    const resultObj = {};\n\n    for (const aptName of names) {\n      //   console.log(name);\n      const filterItems = items\n        // .map((item) => {\n        //   return item.아파트;\n        // })\n        .filter((item) => {\n          return item.아파트 === aptName;\n        })\n        .map((item) => {\n          return item.전용면적;\n        })\n        .sort(function (a, b) {\n          // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\n          var aValue = a;\n          var bValue = b;\n          if (aValue > bValue) {\n            return 1;\n          }\n          if (aValue < bValue) {\n            return -1;\n          }\n          // a must be equal to b\n          return 0;\n        });\n      resultObj[aptName] = [...new Set(filterItems)];\n    }\n    // console.log(resultObj);\n    return resultObj;\n  };\n\n  /**\n   * 계산하여야 할 calcMonth 를 파라미터로 받아 현재 달을 기준으로 1달전, 2달전, 3달전 등의 누적 데이타중 평형별 최고값을 반환한다.\n   * @param {*} calcMonth\n   */\n  this.getAllAptInfo = async function ({ calcMonth = 1 }) {\n    let now = new Date();\n\n    const items = [];\n\n    for (let idx = 0; idx <= calcMonth; idx++) {\n      now = new Date(now.setMonth(now.getMonth() - (idx > 1 ? 1 : idx)));\n      const searchYYYYMM =\n        String(now.getFullYear()) + String(now.getMonth() + 1).padStart(2, \"0\");\n\n      await this.search(searchYYYYMM).then((data) => {\n        items.push(...data);\n      });\n    }\n\n    return items;\n  };\n\n  this.highestPriceApts = function ({ items }) {\n    const sizeArr = new Set(\n      items.map((data) => {\n        return data.전용면적;\n      })\n    );\n    const highestRoomList = [];\n    sizeArr.forEach((size) => {\n      highestRoomList.push(\n        items\n          .filter((item) => {\n            return item.전용면적 === size;\n          })\n          .sort(function (a, b) {\n            // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\n            var aValue = a.거래금액;\n            var bValue = b.거래금액;\n            if (aValue > bValue) {\n              return -1;\n            }\n            if (aValue < bValue) {\n              return 1;\n            }\n            // a must be equal to b\n            return 0;\n          })[0]\n      );\n    });\n\n    return highestRoomList.sort(function (a, b) {\n      // 전용면적 오름차순으로 정렬\n      var aValue = a.전용면적;\n      var bValue = b.전용면적;\n      if (aValue > bValue) {\n        return 1;\n      }\n      if (aValue < bValue) {\n        return -1;\n      }\n      // a must be equal to b\n      return 0;\n    });\n  };\n\n  /**\n   * 거래년월 내림차순으로 정렬 해서 가장 최신 거래 반환\n   * @param {*} items\n   */\n  this.newestDealApts = function ({ items }) {\n    const sizeArr = new Set(\n      items.map((data) => {\n        return data.전용면적;\n      })\n    );\n\n    const highestRoomList = [];\n    sizeArr.forEach((size) => {\n      highestRoomList.push(\n        items\n          .filter((item) => {\n            return item.전용면적 === size;\n          })\n          .sort(function (a, b) {\n            // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\n            const aValue = a.거래금액;\n            const bValue = b.거래금액;\n            if (aValue > bValue) {\n              return -1;\n            }\n            if (aValue < bValue) {\n              return 1;\n            }\n            // a must be equal to b\n            return 0;\n          })[0]\n      );\n    });\n\n    // console.log(highestRoomList);\n\n    const newestRoomList = [];\n    sizeArr.forEach((size) => {\n      newestRoomList.push(\n        items\n          .filter((item) => {\n            return item.전용면적 === size;\n          })\n          .map((newestData) => {\n            const highestDataValue = highestRoomList.filter(\n              (highestData) => highestData.전용면적 === newestData.전용면적\n            )[0].거래금액;\n            return {\n              ...newestData,\n              최고가: highestDataValue,\n            };\n          })\n          .sort(function (a, b) {\n            const aValue = a.거래년월;\n            const bValue = b.거래년월;\n            if (aValue > bValue) {\n              return -1;\n            }\n            if (aValue < bValue) {\n              return 1;\n            }\n            // a must be equal to b\n            return 0;\n          })[0]\n      );\n    });\n\n    return newestRoomList.sort(function (a, b) {\n      // 전용면적 오름차순으로 정렬\n      const aValue = a.전용면적;\n      const bValue = b.전용면적;\n      if (aValue > bValue) {\n        return 1;\n      }\n      if (aValue < bValue) {\n        return -1;\n      }\n      // a must be equal to b\n      return 0;\n    });\n  };\n\n  /**\n   * yyyymmdd 를 파라미터로 받아 조회한 달의 율곡 아파트 데이타를 반환한다.\n   * @param {*} yyyymmdd\n   */\n  this.search = async function (yyyymm) {\n    // console.log(`call yyyymm : ${yyyymm}`);\n    const response = await axios.get(\n      `http://apt.cuvnd.com:3001/api?yyyymm=${yyyymm}`\n    );\n\n    // const result = convert.xml2json(resultXml, {});\n    // const items = result.items.map((item) => ({\n    //   ...item,\n    //   id: item.id.videoId,\n    // }));\n    if(response.data.items.item.length === undefined){\n      return [{...response.data.items.item, 거래금액: Number(response.data.items.item.거래금액.trim().replace(\",\", \"\"))}];\n    }else{\n      return response.data.items.item.map((data) => {\n        return {\n          ...data,\n          거래금액: Number(data.거래금액.trim().replace(\",\", \"\")),\n        };\n      });\n    }\n  };\n};\n\n// enCar 원하는 차량 조회\n// http://api.encar.com/search/car/list/premium?count=true&q=(And.Hidden.N._.(C.CarType.N._.(C.Manufacturer.BMW._.(C.ModelGroup.5%EC%8B%9C%EB%A6%AC%EC%A6%88._.(C.Model.5%EC%8B%9C%EB%A6%AC%EC%A6%88+(F10_)._.(C.BadgeGroup.%EB%94%94%EC%A0%A4+4WD._.Badge.M550d+xDrive.))))))&sr=%7CModifiedDate%7C0%7C20\n\nexport default OpenAPI_APT;\n"],"sourceRoot":""}