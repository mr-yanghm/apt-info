{"version":3,"sources":["components/AptInfo.jsx","components/Footer.jsx","components/SearchBar.jsx","Hooks/useInputs.jsx","app.jsx","index.js","service/dataApi.js"],"names":["to_date_format","date_str","yyyyMMdd","String","substring","AptInfo","aptInfo","highestPriceApts","newestDealApts","nearAptPriceInfo","onClickAddFilter","filters","onFilterDelete","isVisibleSearchbox","useState","onDelete","target","console","log","filter","data","aptName","아파트","aptSize","전용면적","className","map","newestDealApt","index","highestValue","highestPriceApt","Number","거래금액","toLocaleString","층","거래년월","length","apt","최고가","onClick","bind","type","id","Footer","props","href","SearchBar","inquiryPeriodList","onChange","onSearchRangeChange","onFilterRegist","onFilterSave","onFilterReset","aptNameList","selectedSizeList","htmlFor","name","value","reducer","state","action","Object","keys","reduce","acc","current","useInputs","initialForm","useReducer","form","dispatch","useCallback","e","initialState","selectedRangeIndex","Date","App","openApi","loadingIndicator","setLoadingIndicator","setIsVisibleSearchbox","allAptInfo","setAllAptInfo","yulgokAptInfo","setYulgokAptInfo","setNearAptPriceInfo","setAptNameList","aptSizeObj","setAptSizeObj","setSelectedSizeList","inquiryPeriod","onSet","useEffect","getAllAptInfo","calcMonth","then","getFilterAptInfo","items","filterAptName","getAptNameList","aptSizeList","getAptSizeList","names","initFilter","filterSaved","localStorage","getItem","JSON","parse","document","querySelector","style","display","useMemo","result","push","filterAptSize","alert","focus","CircularProgress","window","confirm","setItem","stringify","removeItem","location","reload","requestOptions","method","this","mostPopular","a","fetch","response","json","filterItems","indexOf","년","월","일","padStart","item","sort","b","Set","resultObj","now","idx","setMonth","getMonth","searchYYYYMM","getFullYear","search","sizeArr","highestRoomList","forEach","size","aValue","bValue","newestRoomList","newestData","highestDataValue","highestData","yyyymm","axios","get","undefined","trim","replace","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.535cd619.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport function to_date_format(date_str) {\r\n    const gubun = \"-\";\r\n    var yyyyMMdd = String(date_str);\r\n    var sYear = yyyyMMdd.substring(0, 4);\r\n    var sMonth = yyyyMMdd.substring(4, 6);\r\n    var sDate = yyyyMMdd.substring(6, 8);\r\n\r\n    return sYear + gubun + sMonth + gubun + sDate;\r\n}\r\n\r\nconst AptInfo = ({\r\n    aptInfo: { highestPriceApts, newestDealApts },\r\n    nearAptPriceInfo,\r\n    onClickAddFilter,\r\n    filters,\r\n    onFilterDelete,\r\n    isVisibleSearchbox\r\n}) => {\r\n    const [filter, setFilter] = useState({});\r\n    const onDelete = (target) => {\r\n        console.log('onDelete click~!', target);\r\n        console.log('filters~!', filters);\r\n        const filter = filters.filter((data) => {\r\n            return data.aptName === target.아파트 && data.aptSize === target.전용면적;\r\n        })[0];\r\n        console.log('onDelete filter~!', filter);\r\n        filter && onFilterDelete(filter);\r\n    };\r\n    // console.log(nearAptPriceInfo);\r\n    // console.log();\r\n\r\n    // highestPriceApts.map((highestPriceApt) => ());\r\n\r\n    return (\r\n        <>\r\n            <article>\r\n                <h1>율곡아파트 최근 시세</h1>\r\n                <table className=\"tg\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>전용면적</th>\r\n                            <th>최근거래가</th>\r\n                            <th>최고가</th>\r\n                            <th>층수</th>\r\n                            <th>최근거래가 거래일</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {newestDealApts &&\r\n                            newestDealApts.map((newestDealApt, index) => {\r\n                                const highestValue =\r\n                                    highestPriceApts &&\r\n                                    highestPriceApts.filter(\r\n                                        (highestPriceApt) =>\r\n                                            highestPriceApt.전용면적 === newestDealApt.전용면적\r\n                                    );\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <th className=\"right\">{newestDealApt.전용면적}\r\n                                        </th>\r\n                                        <td className=\"right\">\r\n                                            {Number(newestDealApt.거래금액).toLocaleString(\"ko-KR\")}\r\n                                        </td>\r\n                                        <td className=\"right\">\r\n                                            {highestValue &&\r\n                                                Number(highestValue[0].거래금액).toLocaleString(\r\n                                                    \"ko-KR\"\r\n                                                )}\r\n                                        </td>\r\n                                        <td className=\"center\">{newestDealApt.층}층</td>\r\n                                        <td className=\"center\">\r\n                                            {to_date_format(newestDealApt.거래년월)}\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                    </tbody>\r\n                </table>\r\n            </article>\r\n\r\n            <article>\r\n                <h1>인근아파트 최근 시세({nearAptPriceInfo.length})</h1>\r\n                <table className=\"tg\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>아파트명</th>\r\n                            <th>전용면적</th>\r\n                            <th>최근거래가</th>\r\n                            <th>최고가</th>\r\n                            <th>최근거래가 거래일</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {nearAptPriceInfo &&\r\n                            nearAptPriceInfo.map((apt, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <th className=\"center\">{apt.아파트}\r\n                                        </th>\r\n                                        <td className=\"right\">{apt.전용면적}</td>\r\n                                        <td className=\"right\">\r\n                                            {Number(apt.거래금액).toLocaleString(\"ko-KR\")}\r\n                                        </td>\r\n                                        <td className=\"right\">\r\n                                            {Number(apt.최고가).toLocaleString(\"ko-KR\")}\r\n                                        </td>\r\n                                        <td className=\"center\">{to_date_format(apt.거래년월)}\r\n                                            <button className=\"habit-button habit-delete\" onClick={onDelete.bind(this, apt)}>\r\n                                                <i className=\"fas fa-minus-square\"></i>\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"addFilter\">\r\n                    <button type=\"button\" id=\"addFilter\" onClick={onClickAddFilter}>{isVisibleSearchbox ? \"필터 숨기기\" : \"필터 보이기\"}</button>\r\n                </div>\r\n            </article>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AptInfo;\r\n","import React from \"react\";\r\n\r\nconst Footer = (props) => (\r\n  <footer>\r\n    <ul>\r\n      <li>\r\n        <p>\r\n          해당 자료는\r\n        <a href=\"https://www.data.go.kr/\">https://www.data.go.kr/</a>\r\n        에서 제공하는 자료중 \"군포시\"에 해당하는 자료를 바탕으로 만들었습니다.\r\n        </p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          자료는 공공데이터 포털에 1일 주기로 갱신되며 해당화면은 새로고침 시\r\n          새로운 자료를 받아옵니다.\r\n          </p>\r\n      </li>\r\n      <li>\r\n        <p>조회기간은 이번 월(n)부터 1개월전 월(n-1)까지 입니다.</p></li>\r\n    </ul>\r\n    <p>© 2021 yulgokapt CEO(yulgok.apt@gmail.com)</p>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport FilterBox from \"./FilterBox\";\r\n\r\nconst SearchBar = ({\r\n  inquiryPeriodList,\r\n  onSearchRangeChange,\r\n  onChange,\r\n  onFilterRegist,\r\n  filters,\r\n  onFilterDelete,\r\n  onFilterSave,\r\n  onFilterReset,\r\n  aptNameList,\r\n  selectedSizeList,\r\n  isVisibleSearchbox\r\n}) => {\r\n  return (\r\n    <article className=\"searchBox\" className={isVisibleSearchbox ? \"\" : \"inVisible\"}>\r\n      <div className=\"\">\r\n        <label htmlFor=\"inquiryPeriod\">조회기간 : (현재월을 제외한 최근)</label>\r\n        <div className=\"display-flex\">\r\n          <span></span>\r\n          <select name=\"inquiryPeriod\" id=\"inquiryPeriod\" onChange={onChange} className=\"width25\">\r\n            {inquiryPeriodList.map((value, index) => (\r\n              <option key={index} value={value}>\r\n                {value}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <span>개월</span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <h1>인근아파트 시세 필터</h1>\r\n        <div>\r\n          <label htmlFor=\"aptName\">아파트명 : ({aptNameList && aptNameList.length})</label>\r\n          {/* <input type=\"text\" name=\"aptName\" id=\"aptName\" onChange={onChange} /> */}\r\n          <select name=\"aptName\" id=\"aptName\" onChange={onChange}>\r\n            <option value=\"\">선택하세요</option>\r\n            {\r\n              aptNameList && aptNameList.map((name, index) => {\r\n                return <option key={index} value={name}>{name}</option>\r\n              })\r\n            }\r\n          </select>\r\n          <br />\r\n          <label htmlFor=\"aptSize\">전용면적 : ({selectedSizeList && selectedSizeList.length})</label>\r\n          {/* <input type=\"text\" name=\"aptSize\" id=\"aptSize\" onChange={onChange} /> */}\r\n          <select name=\"aptSize\" id=\"aptSize\" onChange={onChange}>\r\n            <option value=\"\">선택하세요</option>\r\n            {\r\n              selectedSizeList && selectedSizeList.map((name, index) => {\r\n                return <option key={index} value={name}>{name}</option>\r\n              })\r\n            }\r\n          </select>\r\n        </div>\r\n        <div className=\"filter-control-box\">\r\n          <button onClick={onFilterRegist} className=\"habit-button regist\">필터 등록</button>\r\n        </div>\r\n        {/* <FilterBox filters={filters} onFilterDelete={onFilterDelete} /> */}\r\n        <p>\r\n          ※ 모든 필터를 삭제할 시 인근아파트 최근 시세에 전체 아파트 정보가 나옵니다.\r\n        </p>\r\n        <hr />\r\n        <div className=\"filter-addon display-none\">\r\n          <span className=\"filter-control-box\">\r\n            <button onClick={onFilterSave} className=\"habit-button save\">\r\n              필터 저장\r\n            </button>\r\n            <button onClick={onFilterReset} className=\"habit-button reset\">\r\n              필터 초기화\r\n            </button>\r\n          </span>\r\n          <ul>\r\n            <li>\r\n              <p>\r\n                필터 저장 : 로컬에 필터를 저장함. 새로고침해도 저장한 필터 기준으로 화면에 보임\r\n              </p>\r\n            </li>\r\n            <li>\r\n              <p>\r\n                필터 초기화 : 브라우저에 저장된 필터를 초기화. 새로고침시 적용\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        {/* <div className=\"filter-show habit-button\">\r\n          <button onClick=\"\"><i className=\"fas fa-plus-square\"></i> 기능 더보기</button>\r\n        </div> */}\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        [action.name]: action.value\r\n      };\r\n    case 'SET':\r\n      return {\r\n        ...state,\r\n        [action.name]: action.value\r\n      };\r\n    case 'RESET':\r\n      return Object.keys(state).reduce((acc, current) => {\r\n        acc[current] = '';\r\n        return acc;\r\n      }, {});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst useInputs = (initialForm) => {\r\n  const [form, dispatch] = useReducer(reducer, initialForm);\r\n  //change\r\n  const onChange = useCallback((e) => {\r\n    const { name, value } = e.target;\r\n    dispatch({ type: \"CHANGE\", name, value });\r\n  }, []);\r\n\r\n  const onSet = useCallback(({ name, value }) => {\r\n    dispatch({ type: \"CHANGE\", name, value });\r\n  }, []);\r\n\r\n  // 방법 1\r\n  // const reset = useCallback(() => dispatch({ type: \"RESET\", form: initialForm }, [initialForm]));\r\n\r\n  // 방법 2\r\n  const reset = useCallback(() => dispatch({ type: \"RESET\" }, []));\r\n\r\n  // setForm(initialForm), [initialForm]);\r\n  return [form, onChange, onSet, reset];\r\n};\r\n\r\nexport default useInputs;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useReducer,\r\n  useState,\r\n} from \"react\";\r\nimport \"./app.css\";\r\nimport AptInfo from \"./components/AptInfo\";\r\nimport Footer from \"./components/Footer\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport useInputs from \"./Hooks/useInputs\";\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst initialState = {\r\n  inquiryPeriodList: [1, 3, 6, 12],\r\n  selectedRangeIndex: 0,\r\n  filters: [],\r\n};\r\n\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"REGIST_FILTER\":\r\n      const sameFilter = state.filters.filter((data) => {\r\n        return data.aptSize === action.filter.aptSize && data.aptName === action.filter.aptName;\r\n      });\r\n      return sameFilter.length === 0 ? {\r\n        // inputs: initialState.inputs,\r\n        ...state, // 위와 같은 표현\r\n        filters: [...state.filters, { ...action.filter, id: new Date() }],\r\n      } : {...state};\r\n    case \"REGIST_FILTERS\":\r\n      return {\r\n        // inputs: initialState.inputs,\r\n        ...state, // 위와 같은 표현\r\n        filters: action.filters.map((filter) => ({ ...filter, id: new Date() })),\r\n      };\r\n    case \"REMOVE_FILTER\":\r\n      return {\r\n        ...state,\r\n        filters: state.filters.filter(\r\n          (filter) => filter.id !== action.filter.id\r\n        ),\r\n      };\r\n    case \"RESET_FILTER\":\r\n      return {\r\n        ...action.initialState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst App = ({ openApi }) => {\r\n  let [loadingIndicator, setLoadingIndicator] = useState(true);\r\n\r\n  const [isVisibleSearchbox, setIsVisibleSearchbox] = useState(false);\r\n\r\n  const [inquiryPeriodList, setInquiryPeriodList] = useState(\r\n    initialState.inquiryPeriodList\r\n  );\r\n  const [allAptInfo, setAllAptInfo] = useState([]);\r\n  const [yulgokAptInfo, setYulgokAptInfo] = useState({});\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [nearAptPriceInfo, setNearAptPriceInfo] = useState([]);\r\n  const [aptNameList, setAptNameList] = useState([]);\r\n  const [aptSizeObj, setAptSizeObj] = useState({});\r\n  const [selectedSizeList, setSelectedSizeList] = useState([]);\r\n\r\n  const [{ aptName, aptSize, inquiryPeriod }, onChange, onSet, reset] = useInputs({\r\n    aptName: \"\",\r\n    aptSize: \"\",\r\n    inquiryPeriod: \"1\",\r\n  });\r\n\r\n  const onLoading = () => {\r\n    setLoadingIndicator(true);\r\n  }\r\n\r\n  const offLoading = () => {\r\n    setLoadingIndicator(false);\r\n  }\r\n\r\n  const { filters } = state;\r\n\r\n  /**\r\n   * 1. 컴포넌트가 마운트 되면 아파트 정보를 조회한 후 저장된 Filter 또는 기본 Filter 로 필터링하여 화면에 출력한다.\r\n   */\r\n\r\n  useEffect(() => {\r\n    setSelectedSizeList(aptSizeObj[aptName]);\r\n    aptSizeObj[aptName] && onSet({ name: 'aptSize', value: aptSizeObj[aptName][0] });\r\n  }, [aptName]);\r\n\r\n  useEffect(() => {\r\n    onLoading();\r\n    openApi\r\n      .getAllAptInfo({ calcMonth: inquiryPeriod })\r\n      .then((data) => {\r\n        console.log(`data : ${data.length}`);\r\n        setAllAptInfo(data);\r\n      });\r\n  }, [inquiryPeriod]);\r\n\r\n  useEffect(() => {\r\n    if (!allAptInfo.length) {\r\n      return;\r\n    }\r\n    console.log(`allAptInfo useMemo`);\r\n    setYulgokAptInfo(\r\n      openApi.getFilterAptInfo({ items: allAptInfo, filterAptName: \"율곡\" })\r\n    );\r\n    // console.log(openApi.getFilterAptInfo({ items: allAptInfo }).newestDealApts);\r\n    setNearAptPriceInfo(\r\n      openApi.getFilterAptInfo({ items: allAptInfo }).newestDealApts\r\n    );\r\n    const aptNameList = openApi.getAptNameList({ items: allAptInfo });\r\n    setAptNameList(aptNameList);\r\n    const aptSizeList = openApi.getAptSizeList({ items: allAptInfo, names: aptNameList });\r\n\r\n    setAptSizeObj(aptSizeList);\r\n\r\n    // dispatch({\r\n    //   type: \"RESET_FILTER\",\r\n    //   initialState,\r\n    // })\r\n\r\n    console.log(filters);\r\n    let initFilter = [...filters];\r\n\r\n    if (!filters.length) {\r\n\r\n      initFilter = [\r\n        { aptName: \"한라주공4\", aptSize: 41.85 },\r\n        { aptName: \"한라주공4\", aptSize: 51.66 },\r\n        { aptName: \"래미안 하이어스\", aptSize: 59.94 },\r\n        { aptName: \"충무주공(873-2)\", aptSize: 41.4 },\r\n        { aptName: \"충무주공(872)\", aptSize: 41.85 },\r\n        { aptName: \"충무주공(872)\", aptSize: 42.75 },\r\n        { aptName: \"충무주공(872)\", aptSize: 44.06 },\r\n        { aptName: \"세종\", aptSize: 58.46 },\r\n        { aptName: \"세종\", aptSize: 58.71 },\r\n        { aptName: \"우륵\", aptSize: 58.46 },\r\n        { aptName: \"우륵\", aptSize: 58.71 },\r\n      ];\r\n      const filterSaved = localStorage.getItem(\"aptInfoFilter\");\r\n      if (filterSaved && JSON.parse(filterSaved).length) {\r\n        initFilter = JSON.parse(filterSaved);\r\n        document.querySelector('.filter-addon').style.display = 'block';\r\n      }\r\n      // console.log(initFilter);\r\n      // for (const filter of initFilter) {\r\n      //   dispatch({\r\n      //     type: \"REGIST_FILTER\",\r\n      //     filter: {\r\n      //       aptName: filter.aptName,\r\n      //       aptSize: filter.aptSize,\r\n      //     },\r\n      //   });\r\n      // }\r\n    }\r\n    dispatch({\r\n      type: \"REGIST_FILTERS\",\r\n      filters: initFilter,\r\n    });\r\n\r\n  }, [allAptInfo])\r\n\r\n  useMemo(() => {\r\n    const result = [];\r\n    for (const filter of filters) {\r\n      result.push(\r\n        ...openApi.getFilterAptInfo({\r\n          items: allAptInfo,\r\n          filterAptName: filter.aptName,\r\n          filterAptSize: filter.aptSize,\r\n        }).newestDealApts\r\n      );\r\n    }\r\n    if (filters.length === 0 && allAptInfo.length > 0) {\r\n      result.push(\r\n        ...openApi.getFilterAptInfo({ items: allAptInfo }).newestDealApts\r\n      );\r\n    }\r\n    setNearAptPriceInfo(result);\r\n    offLoading();\r\n    console.log(`filter update`);\r\n  }, [filters]);\r\n\r\n  const onSearchRangeChange = (event) => {\r\n    openApi.getAllAptInfo({ calcMonth: event.target.value }).then((data) => {\r\n      setAllAptInfo(data);\r\n      setYulgokAptInfo(\r\n        openApi.getFilterAptInfo({ items: data, filterAptName: \"율곡\" })\r\n      );\r\n      setNearAptPriceInfo(\r\n        openApi.getFilterAptInfo({ items: data }).newestDealApts\r\n      );\r\n    });\r\n  };\r\n\r\n  const onFilterRegist = useCallback(() => {\r\n    if (!aptName){\r\n      alert('아파트명을 선택하세요.');\r\n      document.querySelector(\"#aptName\").focus();\r\n      return ;\r\n    }\r\n\r\n    console.log(`aptSize :: ${aptSize}`)\r\n    if (!aptSize){\r\n      alert('전용면적을 선택하세요.');\r\n      document.querySelector(\"#aptSize\").focus();\r\n      return ;\r\n    }\r\n\r\n    dispatch({\r\n      type: \"REGIST_FILTER\",\r\n      filter: {\r\n        aptName: aptName,\r\n        aptSize: Number(aptSize),\r\n      },\r\n    });\r\n    document.querySelector('.filter-addon').style.display = 'block';\r\n  });\r\n\r\n  const onFilterDelete = useCallback((filter) => {\r\n    dispatch({\r\n      type: \"REMOVE_FILTER\",\r\n      filter: {\r\n        id: filter.id,\r\n        aptName: filter.aptName,\r\n        aptSize: filter.aptSize,\r\n      },\r\n    });\r\n    document.querySelector('.filter-addon').style.display = 'block';\r\n  });\r\n\r\n  const onFilterSave = () => {\r\n    if (window.confirm('이 기능은 새로고침해도 현재 필터를 유지하는 기능입니다. 필터를 저장하시겠습니까?')) {\r\n      localStorage.setItem(\"aptInfoFilter\", JSON.stringify(filters));\r\n    }\r\n  };\r\n\r\n  const onFilterReset = () => {\r\n    localStorage.removeItem(\"aptInfoFilter\");\r\n    alert('로컬에 저장된 필터가 초기화 되었습니다.');\r\n    document.location.reload();\r\n  };\r\n\r\n  const onClickAddFilter = () => {\r\n    setIsVisibleSearchbox(!isVisibleSearchbox);\r\n    console.log('onClickAddFilter clicked~!');\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {loadingIndicator === true ? (\r\n        <div className=\"modal\">\r\n          <div className=\"modalContent\">\r\n            <CircularProgress className=\"spinner\" />\r\n          </div>\r\n          <div className=\"modalLayer\"></div>\r\n        </div>\r\n      ) : null}\r\n      <AptInfo\r\n        aptInfo={yulgokAptInfo}\r\n        nearAptPriceInfo={nearAptPriceInfo}\r\n        onClickAddFilter={onClickAddFilter}\r\n        filters={filters || []}\r\n        onFilterDelete={onFilterDelete}\r\n        isVisibleSearchbox={isVisibleSearchbox}\r\n      />\r\n      <SearchBar\r\n        // onSearchRangeChange={onSearchRangeChange}\r\n        inquiryPeriodList={inquiryPeriodList}\r\n        aptName={aptName}\r\n        aptSize={aptSize}\r\n        onChange={onChange}\r\n        onFilterRegist={onFilterRegist}\r\n        onFilterDelete={onFilterDelete}\r\n        filters={filters || []}\r\n        onFilterSave={onFilterSave}\r\n        onFilterReset={onFilterReset}\r\n        aptNameList={aptNameList}\r\n        selectedSizeList={selectedSizeList}\r\n        isVisibleSearchbox={isVisibleSearchbox}\r\n      />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/js/all.js\";\r\nimport \"./index.css\";\r\nimport App from \"./app\";\r\nimport OpenAPI_APT from \"./service/dataApi\";\r\n\r\nconst openApi = new OpenAPI_APT();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App openApi={openApi} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import axios from \"axios\";\r\n\r\nconst OpenAPI_APT = function () {\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n  };\r\n  this.mostPopular = async function () {\r\n    const response = await fetch(\r\n      \"https://youtube.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&key=AIzaSyAU1YyXdo8gO7kYc0Ypy0f66VBGja-8ofU\",\r\n      requestOptions\r\n    );\r\n\r\n    const result = await response.json();\r\n    return result.items;\r\n  };\r\n\r\n  this.getFilterAptInfo = function ({\r\n    items,\r\n    filterAptName = \"\",\r\n    filterAptSize = \"\",\r\n  }) {\r\n    // console.log(\r\n    //   `filterAptName : ${filterAptName}, filterAptSize : ${filterAptSize}`\r\n    // );\r\n    const filterItems = items\r\n      .filter((data) => {\r\n        // return data.아파트 === filterAptName;\r\n        if (filterAptName && filterAptSize) {\r\n          return (\r\n            data.아파트.indexOf(filterAptName) > -1 &&\r\n            data.전용면적 === Number(filterAptSize)\r\n          );\r\n        } else if (filterAptName) {\r\n          return data.아파트.indexOf(filterAptName) > -1;\r\n        } else if (filterAptSize) {\r\n          return data.전용면적 === Number(filterAptSize);\r\n        } else {\r\n          return data;\r\n        }\r\n        // if (filterAptSize) {\r\n        //   return (\r\n        //     data.아파트.indexOf(filterAptName) > -1 &&\r\n        //     data.전용면적 === Number(filterAptSize)\r\n        //   );\r\n        // } else {\r\n        //   return data.아파트.indexOf(filterAptName) > -1;\r\n        // }\r\n      })\r\n      .map((data) => {\r\n        return {\r\n          // 거래금액: Number(data.거래금액.trim().replace(\",\", \"\")),\r\n          거래금액: data.거래금액,\r\n          년: data.년,\r\n          월: data.월,\r\n          일: data.일,\r\n          전용면적: data.전용면적,\r\n          층: data.층,\r\n          아파트: data.아파트,\r\n          거래년월:\r\n            data.년 +\r\n            String(data.월).padStart(2, \"0\") +\r\n            String(data.일).padStart(2, \"0\"),\r\n        };\r\n      });\r\n\r\n    return {\r\n      highestPriceApts: this.highestPriceApts({ items: filterItems }),\r\n      newestDealApts: this.newestDealApts({ items: filterItems }),\r\n    };\r\n  };\r\n\r\n  /**\r\n   * 전체 목록 중에서 AptName 을 중복제거 후 오름차순 정렬하여 반환\r\n   * @param {*} items : array\r\n   */\r\n  this.getAptNameList = function ({ items }) {\r\n    const filterItems = items\r\n      .map((item) => {\r\n        return item.아파트;\r\n      })\r\n      .sort(function (a, b) {\r\n        // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\r\n        var aValue = a;\r\n        var bValue = b;\r\n        if (aValue > bValue) {\r\n          return 1;\r\n        }\r\n        if (aValue < bValue) {\r\n          return -1;\r\n        }\r\n        // a must be equal to b\r\n        return 0;\r\n      });\r\n    return [...new Set(filterItems)];\r\n  };\r\n\r\n  this.getAptSizeList = function ({ items, names }) {\r\n    const resultObj = {};\r\n\r\n    for (const aptName of names) {\r\n      //   console.log(name);\r\n      const filterItems = items\r\n        // .map((item) => {\r\n        //   return item.아파트;\r\n        // })\r\n        .filter((item) => {\r\n          return item.아파트 === aptName;\r\n        })\r\n        .map((item) => {\r\n          return item.전용면적;\r\n        })\r\n        .sort(function (a, b) {\r\n          // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\r\n          var aValue = a;\r\n          var bValue = b;\r\n          if (aValue > bValue) {\r\n            return 1;\r\n          }\r\n          if (aValue < bValue) {\r\n            return -1;\r\n          }\r\n          // a must be equal to b\r\n          return 0;\r\n        });\r\n      resultObj[aptName] = [...new Set(filterItems)];\r\n    }\r\n    // console.log(resultObj);\r\n    return resultObj;\r\n  };\r\n\r\n  /**\r\n   * 계산하여야 할 calcMonth 를 파라미터로 받아 현재 달을 기준으로 1달전, 2달전, 3달전 등의 누적 데이타중 평형별 최고값을 반환한다.\r\n   * @param {*} calcMonth\r\n   */\r\n  this.getAllAptInfo = async function ({ calcMonth = 1 }) {\r\n    let now = new Date();\r\n\r\n    const items = [];\r\n\r\n    for (let idx = 0; idx <= calcMonth; idx++) {\r\n      now = new Date(now.setMonth(now.getMonth() - (idx > 1 ? 1 : idx)));\r\n      const searchYYYYMM =\r\n        String(now.getFullYear()) + String(now.getMonth() + 1).padStart(2, \"0\");\r\n\r\n      await this.search(searchYYYYMM).then((data) => {\r\n        items.push(...data);\r\n      });\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  this.highestPriceApts = function ({ items }) {\r\n    const sizeArr = new Set(\r\n      items.map((data) => {\r\n        return data.전용면적;\r\n      })\r\n    );\r\n    const highestRoomList = [];\r\n    sizeArr.forEach((size) => {\r\n      highestRoomList.push(\r\n        items\r\n          .filter((item) => {\r\n            return item.전용면적 === size;\r\n          })\r\n          .sort(function (a, b) {\r\n            // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\r\n            var aValue = a.거래금액;\r\n            var bValue = b.거래금액;\r\n            if (aValue > bValue) {\r\n              return -1;\r\n            }\r\n            if (aValue < bValue) {\r\n              return 1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n          })[0]\r\n      );\r\n    });\r\n\r\n    return highestRoomList.sort(function (a, b) {\r\n      // 전용면적 오름차순으로 정렬\r\n      var aValue = a.전용면적;\r\n      var bValue = b.전용면적;\r\n      if (aValue > bValue) {\r\n        return 1;\r\n      }\r\n      if (aValue < bValue) {\r\n        return -1;\r\n      }\r\n      // a must be equal to b\r\n      return 0;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 거래년월 내림차순으로 정렬 해서 가장 최신 거래 반환\r\n   * @param {*} items\r\n   */\r\n  this.newestDealApts = function ({ items }) {\r\n    const sizeArr = new Set(\r\n      items.map((data) => {\r\n        return data.전용면적;\r\n      })\r\n    );\r\n\r\n    const highestRoomList = [];\r\n    sizeArr.forEach((size) => {\r\n      highestRoomList.push(\r\n        items\r\n          .filter((item) => {\r\n            return item.전용면적 === size;\r\n          })\r\n          .sort(function (a, b) {\r\n            // 거래금액 내림차순으로 정렬 해서 가장 큰 금액 반환\r\n            const aValue = a.거래금액;\r\n            const bValue = b.거래금액;\r\n            if (aValue > bValue) {\r\n              return -1;\r\n            }\r\n            if (aValue < bValue) {\r\n              return 1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n          })[0]\r\n      );\r\n    });\r\n\r\n    // console.log(highestRoomList);\r\n\r\n    const newestRoomList = [];\r\n    sizeArr.forEach((size) => {\r\n      newestRoomList.push(\r\n        items\r\n          .filter((item) => {\r\n            return item.전용면적 === size;\r\n          })\r\n          .map((newestData) => {\r\n            const highestDataValue = highestRoomList.filter(\r\n              (highestData) => highestData.전용면적 === newestData.전용면적\r\n            )[0].거래금액;\r\n            return {\r\n              ...newestData,\r\n              최고가: highestDataValue,\r\n            };\r\n          })\r\n          .sort(function (a, b) {\r\n            const aValue = a.거래년월;\r\n            const bValue = b.거래년월;\r\n            if (aValue > bValue) {\r\n              return -1;\r\n            }\r\n            if (aValue < bValue) {\r\n              return 1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n          })[0]\r\n      );\r\n    });\r\n\r\n    return newestRoomList.sort(function (a, b) {\r\n      // 전용면적 오름차순으로 정렬\r\n      const aValue = a.전용면적;\r\n      const bValue = b.전용면적;\r\n      if (aValue > bValue) {\r\n        return 1;\r\n      }\r\n      if (aValue < bValue) {\r\n        return -1;\r\n      }\r\n      // a must be equal to b\r\n      return 0;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * yyyymmdd 를 파라미터로 받아 조회한 달의 율곡 아파트 데이타를 반환한다.\r\n   * @param {*} yyyymmdd\r\n   */\r\n  this.search = async function (yyyymm) {\r\n    // console.log(`call yyyymm : ${yyyymm}`);\r\n    const response = await axios.get(\r\n      `http://apt-info.cuvnd.com:3001/api?yyyymm=${yyyymm}`\r\n    );\r\n\r\n    // const result = convert.xml2json(resultXml, {});\r\n    // const items = result.items.map((item) => ({\r\n    //   ...item,\r\n    //   id: item.id.videoId,\r\n    // }));\r\n    if(response.data.items.item.length === undefined){\r\n      return [{...response.data.items.item, 거래금액: Number(response.data.items.item.거래금액.trim().replace(\",\", \"\"))}];\r\n    }else{\r\n      return response.data.items.item.map((data) => {\r\n        return {\r\n          ...data,\r\n          거래금액: Number(data.거래금액.trim().replace(\",\", \"\")),\r\n        };\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n// enCar 원하는 차량 조회\r\n// http://api.encar.com/search/car/list/premium?count=true&q=(And.Hidden.N._.(C.CarType.N._.(C.Manufacturer.BMW._.(C.ModelGroup.5%EC%8B%9C%EB%A6%AC%EC%A6%88._.(C.Model.5%EC%8B%9C%EB%A6%AC%EC%A6%88+(F10_)._.(C.BadgeGroup.%EB%94%94%EC%A0%A4+4WD._.Badge.M550d+xDrive.))))))&sr=%7CModifiedDate%7C0%7C20\r\n\r\nexport default OpenAPI_APT;\r\n"],"sourceRoot":""}